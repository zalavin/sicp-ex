#lang sicp

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))

(A 1 10)
; (A 0 (A (1 9)))
; (A 0 (A 0 (A 1 8)))
; (A 0 (A 0 ... (A 1 1))
; (A 0 (A 0 ... A(0 2)))
; (A 0 1) = 2
; (A 1 2) = (A 0 (A 1 1)) = (A 0 2) = 4
; 2 4 8 16 32 64 128 256 512 1034

(A 2 4)
; (A 1 (A 2 3))
; (A 1 (A 1 (A 2 2)))
; (A 1 (A 1 (A 1 (A 2 1)))
; (A 1 (A 1 (A 1 2)))
; (A 1 (A 1 (A 0 (A 1 1))))
; (A 1 (A 1 (A 0 2))
; (A 1 (A 1 4))
; (A 1 (A 0 (A 1 3)))
; (A 1 (A 0 8))
; (A 1 16)
; 2 ** 16

(A 3 3)
; (A 2 (A 3 2))
; (A 2 (A 2 (A 3 1)))
; (A 2 (A 2 2)))
; (A 2 (A 1 (A 2 1)))
; (A 2 (A 1 2))
; (A 2 (A 0 (A 1 1)))
; (A 2 4)
; 2 ** 16

(define (f n) (A 0 n))   ; 2n
(define (g n) (A 1 n))   ; 2^n
(define (h n) (A 2 n))   ; for n < 4 2^(2^(n-1)) else 2^(2^n)
(define (k n) (* 5 n n)) ; 5n^2

(h 1) ; 2 = 2^1
(h 2) ; 4 = 2^2
(h 3) ; 16 = 2^4
(h 4) ; 65536 = 2^16
